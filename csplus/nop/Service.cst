<%-- 
Name:IService for CRUD + S
Author: hu@blogQ.com.cn
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Description="Create packing list from XML PO." %>
<%@ XmlProperty Name="Entity" Schema="entity.xsd" Optional="False" Category="Data" Description="Purchase Order to generate packing list for." %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Text" %>

<%
StringBuilder builder = new StringBuilder();
string initial = Entity.Name.Substring(0,1);
string others = Entity.Name.Substring(1);
builder.Append(initial.ToLower()).Append(others);


string entityName = Entity.Name;
string entityVariable = Entity.Name.Substring(0,1).ToLower() + Entity.Name.Substring(1);
string entityCollection = Entity.CollectionName;
string entityCollectionVariable = Entity.CollectionName.Substring(0,1).ToLower() + Entity.CollectionName.Substring(1);
string repository = entityVariable + "Repository";

%>
//============================================================
//  DESCRIPTION
//============================================================
// FileName : <%=Entity.Name%>Service
//
//
//
//============================================================
//  Generated by CodeSmith
//  Date:<%=DateTime.Now %>
//============================================================

namespace Dragonfly.Services.<%=Entity.Namespace %>
{
    using Dragonfly.Core;
    using Dragonfly.Core.Caching;
    using Dragonfly.Core.Data;
    using Dragonfly.Core.Domain.<%=Entity.Namespace%>;
    using Dragonfly.Services.Events;
    using System;
    using System.Collections.Generic;
    using System.Linq;


    /// <summary>
    /// <%=entityName%> service interface
    /// </summary>
    public partial class <%=entityName%>Service : I<%=entityName%>Service
    {
    
        #region Fields
        
        private readonly IRepository<<%=entityName%>> _<%=repository%>;
        private readonly IEventPublisher _eventPublisher;
        private readonly ICacheManager _cacheManager;
        
        #endregion

        #region Ctor
        
        public <%=entityName%>Service(ICacheManager cacheManager,
            IRepository<<%=entityName%>> <%=repository%>,
            IEventPublisher eventPublisher)
        {
            this._cacheManager = cacheManager;
            this._<%=repository%> = <%=repository%>;
            this._eventPublisher = eventPublisher;
        }
        
        #endregion
        
         #region Methods
         
        /// <summary>
        /// Deletes a <%=entityVariable%>
        /// </summary>
        /// <param name="<%=entityVariable%>"><%=entityName%></param>
        public virtual void Delete<%=entityName%>(<%=entityName%>  <%=entityVariable%>)
        {
             if (<%=entityVariable%> == null)
                throw new ArgumentNullException("<%=entityVariable%>");

             _<%=repository%>.Delete(<%=entityVariable%>);

            //event notification
            _eventPublisher.EntityDeleted(<%=entityVariable%>);
        }

        /// <summary>
        /// Gets a <%=entityVariable%>
        /// </summary>
        /// <param name="<%=entityVariable%>Id"><%=entityName%> identifier</param>
        /// <returns><%=entityName%></returns>
        public virtual <%=entityName%>  Get<%=entityName%>ById(Guid <%=entityVariable%>Id)
        {
             if (<%=entityVariable%>Id == Guid.Empty)
                return null;

            return  _<%=repository%>.GetById(<%=entityVariable%>Id);
        }
        
        
        /// <summary>
        /// Gets a <%=entityVariable%>
        /// </summary>
        /// <param name="<%=entityVariable%>Ids"><%=entityName%> identifier</param>
        /// <returns><%=entityCollection%></returns>
        public virtual IList<<%=entityName%>>  Get<%=entityCollection%>ByIds(Guid[] <%=entityVariable%>Ids)
        {
            if (<%=entityVariable%>Ids == null || <%=entityVariable%>Ids.Length == 0)
                return new List<<%=entityName%>>();

            var query = from qe in _<%=repository%>.Table
                        where <%=entityVariable%>Ids.Contains(qe.Id)
                        select qe;
            var <%=entityName%> = query.ToList();
            //sort by passed identifiers
            var sorted<%=entityName%> = new List<<%=entityName%>>();
            foreach (var id in <%=entityVariable%>Ids)
            {
                var <%=entityVariable%> = <%=entityName%>.Find(x => x.Id == id);
                if (<%=entityVariable%> != null)
                    sorted<%=entityName%>.Add(<%=entityVariable%>);
            }
            return sorted<%=entityName%>;
        }

        /// <summary>
        /// Gets all <%=entityCollection %>
        /// </summary>
        /// <returns><%=entityCollection%></returns>
        public virtual IList<<%=entityName%>> GetAll<%=entityCollection%>()
        {
            var query = _<%=repository%>.Table;           
           
            var <%=entityCollectionVariable%> = query.ToList();
            return <%=entityCollectionVariable%>;
        }
        
         /// <summary>
        /// Search all <%=entityCollection %>
        /// </summary>
        /// <returns><%=entityCollection%></returns>
        public virtual IPagedList<<%=entityName%>> Search<%=entityCollection%>(int pageIndex, int pageSize)
        {
            var query = _<%=repository%>.Table;           
            query = query.OrderBy(x=>x.Id);
            
            var <%=entityCollectionVariable%> = new PagedList<<%=entityName%>>(query, pageIndex, pageSize);
            return <%=entityCollectionVariable%>;
        }

        /// <summary>
        /// Creates a <%=entityVariable%>
        /// </summary>
        /// <param name="<%=entityVariable%>"><%=entityName%></param>
        public virtual void Create<%=entityName%>(<%=entityName%> <%=entityVariable%>)
        {
             if (<%=entityVariable%> == null)
                throw new ArgumentNullException("<%=entityVariable%>");

             _<%=repository%>.Insert(<%=entityVariable%>);

            //event notification
            _eventPublisher.EntityInserted(<%=entityVariable%>);
        }

        /// <summary>
        /// Updates the <%=entityVariable%>
        /// </summary>
        /// <param name="<%=entityVariable%>"><%=entityName%></param>
        public virtual void Update<%=entityName%>(<%=entityName%> <%=entityVariable%>)
        {
            if (<%=entityVariable%> == null)
                throw new ArgumentNullException("<%=entityVariable%>");

             _<%=repository%>.Update(<%=entityVariable%>);

            //event notification
            _eventPublisher.EntityUpdated(<%=entityVariable%>);
        }
        
         <%foreach(var attr in Entity.Attributes){
            if(attr.Name == "Deleted")
            {               
                %>
        
        
        /// <summary>
        /// Remove the <%=entityVariable%>
        /// </summary>
        /// <param name="<%=entityVariable%>"></param>
        public virtual void Remove<%=entityName%>(<%=entityName%> <%=entityVariable%>)
        {
           if (<%=entityVariable%> == null)
                throw new ArgumentNullException("<%=entityVariable%>");

            <%=entityVariable%>.Deleted = true;
            Update<%=entityName%>(<%=entityVariable%>);
        }
        
        <%
             break;
            }
           
            }%>
        
        <%foreach(var attr in Entity.Attributes){
            if(attr.IsFKey)
            {
                var fKeyName = attr.Name;
                var fkVariable = GetInitial(attr.Name);
                %>
        /// <summary>
        /// Gets <%=entityCollection %> By <%=fKeyName %>
        /// </summary>
        /// <returns><%=entityCollection%></returns>
        public virtual IPagedList<<%=entityName%> > Get<%=entityCollection%>By<%=fKeyName%>(Guid <%=fkVariable%>, int pageIndex, int pageSize)
        {
            if (<%=fkVariable%> == Guid.Empty)
                return null;
            
            var query = _<%=repository%>.Table; 
            
            query = query.Where(x=>x.<%=fKeyName%> == <%=fkVariable%>);
            query = query.OrderBy(x=>x.Id);
           
            var <%=entityCollectionVariable%> = new PagedList<<%=entityName%>>(query, pageIndex, pageSize);
            return <%=entityCollectionVariable%>;
        }
        
        
        <%
            }
        } %>
        
        #endregion
    }
}


<script runat="template">
public string GetInitial(string src){
    StringBuilder builder = new StringBuilder();
    string initial = src.Substring(0,1);
    string others = src.Substring(1);
    builder.Append(initial.ToLower()).Append(others);
    return builder.ToString();
    
}
</script>